import {
  Injectable,
  InternalServerErrorException,
  UnauthorizedException,
} from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { getEnvVar } from '../common/functions';
import * as ms from 'ms';
import { v4 as uuidv4 } from 'uuid';
import { JsonWebTokenError, JwtService } from '@nestjs/jwt';
import { createHash, randomBytes } from 'crypto';
import { RefreshToken } from '../../generated/prisma';
import { RefreshTokenPayload } from './types/refresh-token.types';
import { UsersService } from '../users/users.service';

@Injectable()
export class RefreshTokenService {
  constructor(
    private readonly jwtService: JwtService,
    private readonly prisma: PrismaService,
    private readonly usersService: UsersService,
  ) {}

  hashRefreshToken(token: string, salt?: string) {
    if (!salt) {
      salt = randomBytes(16).toString('hex');
    }

    const hash = createHash('sha256')
      .update(salt + token)
      .digest('hex');

    return { hash, salt };
  }

  ensureRefreshTokenMatches(token: string, storedToken: RefreshToken): void {
    const tokenMatch: boolean =
      this.hashRefreshToken(token, storedToken.salt).hash ===
      storedToken.tokenHash;

    if (storedToken.revoked === true || !tokenMatch) {
      // security alert : the token has been stolen, altered, not generated by this server or the secret has changed
      throw new UnauthorizedException(
        'Revoked token or does not match with stored one',
      );
    }
  }

  async issueRefreshToken(userId: number): Promise<string> {
    try {
      const jwtRefreshExp = getEnvVar('JWT_REFRESH_EXPIRATION');
      const msJwtRefreshExp = ms(jwtRefreshExp as ms.StringValue);
      const expirationDate = new Date(Date.now() + msJwtRefreshExp);

      if (isNaN(expirationDate.getTime())) {
        throw new InternalServerErrorException('Invalid expiration date');
      }

      const payload = { id: uuidv4(), sub: userId };
      const newRefreshToken = this.jwtService.sign(payload, {
        secret: getEnvVar('JWT_SUPER_SECRET'),
        expiresIn: jwtRefreshExp,
      });

      const { hash, salt } = this.hashRefreshToken(newRefreshToken);

      await this.prisma.refreshToken.create({
        data: {
          id: payload.id,
          userId,
          tokenHash: hash,
          salt,
          expiresAt: expirationDate,
        },
      });

      return newRefreshToken;
    } catch (error) {
      throw new InternalServerErrorException();
    }
  }

  async rotate(refreshToken: string, userId: number): Promise<string> {
    const decodedToken: RefreshTokenPayload =
      this.jwtService.decode(refreshToken);
    try {
      this.jwtService.verify(refreshToken, {
        secret: getEnvVar('JWT_SUPER_SECRET'),
      });

      const storedRefreshToken = await this.prisma.refreshToken.findUnique({
        where: { id: decodedToken.id },
      });

      if (!storedRefreshToken) {
        throw new UnauthorizedException('Refresh token not found in DB');
      }

      const user = await this.usersService.findOneById(userId);

      if (!user) {
        throw new UnauthorizedException('User not found in DB');
      }

      this.ensureRefreshTokenMatches(refreshToken, storedRefreshToken);

      await this.prisma.refreshToken.update({
        where: { id: decodedToken.id },
        data: {
          revoked: true,
        },
      });

      return await this.issueRefreshToken(user.id);
    } catch (error) {
      if (
        error instanceof UnauthorizedException ||
        error instanceof JsonWebTokenError
      ) {
        await this.prisma.refreshToken.updateMany({
          where: { userId: decodedToken.sub, revoked: false },
          data: {
            revoked: true,
          },
        });
        throw new UnauthorizedException('Invalid refresh token');
      } else {
        throw new InternalServerErrorException(
          'An unexpected error occured during rotate refresh token',
        );
      }
    }
  }
}
