// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  username    String        @unique
  password    String
  workouts    Workout[]
  exercises   Exercise[]
  ExerciseSet ExerciseSet[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Exercise {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  isPublic          Boolean
  createdBy         User?              @relation(fields: [createdById], references: [id])
  createdById       Int?
  TrainingExercises TrainingExercise[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Workout {
  id        Int        @id @default(autoincrement())
  user      User       @relation(fields: [userId], references: [id])
  userId    Int
  name      String
  trainings Training[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Training {
  id                Int                @id @default(autoincrement())
  workout           Workout            @relation(fields: [workoutId], references: [id])
  workoutId         Int
  name              String
  TrainingExercises TrainingExercise[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model TrainingExercise {
  id             Int           @id @default(autoincrement())
  training       Training      @relation(fields: [trainingId], references: [id])
  trainingId     Int
  exercise       Exercise      @relation(fields: [exerciseId], references: [id])
  exerciseId     Int
  targetSets     Int
  targetReps     Int
  targetWeight   Float
  targetRestTime Int
  position       Int
  ExerciseSets   ExerciseSet[]
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

model ExerciseSet {
  id                 Int              @id @default(autoincrement())
  user               User             @relation(fields: [userId], references: [id])
  userId             Int
  trainingExercise   TrainingExercise @relation(fields: [trainingExerciseId], references: [id])
  trainingExerciseId Int
  reps               Int
  weight             Float
  restTime           Int
  performedAt        DateTime         @default(now())
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}
